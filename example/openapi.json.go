// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// doc/openapi.json
// doc/test-openapi.json
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docOpenapiJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4b\x6f\xdb\x36\x1c\xbf\xe7\x53\x10\xdc\x8e\x46\xec\xa4\x2d\x86\xe9\x34\x14\xd8\x80\xa1\xc0\x32\xac\xbb\x05\x39\xb0\x12\x9d\xa8\xb0\x44\x85\xa4\x03\x04\x86\x01\xa7\x48\x9b\x2c\xc8\x0b\x68\x62\x6c\x6e\x3b\x2c\xe8\x76\xd9\x21\xce\xb0\xa1\x5b\x3b\x17\xfd\x30\x8b\x64\xe7\x94\xaf\x30\x48\xa4\x6c\x51\xa2\x64\xcf\x19\xd6\xb5\xc8\x21\x0f\x91\x3f\xfe\xfe\x0f\xfe\x5f\x52\x63\x06\x00\x00\x20\xf1\xb0\x8b\x3c\x1b\x1a\x00\xde\x98\xad\xcc\x56\x60\x49\xac\xdb\x6e\x95\x40\x03\x08\x14\x00\x90\xdb\xbc\x86\x43\xd4\xa0\xfb\x7b\xf0\xcb\x83\x8b\x9f\x77\x07\xdd\x8d\xe0\xe9\x9e\xbf\x73\x22\x8f\x00\x00\x2d\xcc\x4c\x6a\x7b\xdc\x26\x6e\x08\xbd\x68\x75\x06\x6f\xb6\xa4\x04\x70\x9f\x11\x17\x30\x73\x05\x3b\x08\x88\xe3\x82\xca\x3f\x78\x10\x1c\x9f\xfd\xd5\xda\x08\x7e\xe8\xf9\xbd\x03\x7f\xb7\x9d\x5a\x1f\xbc\x39\xf2\x9f\x7c\x2f\x1e\x47\xb2\x4c\xe2\x72\x64\xf2\x84\x8e\x00\x40\xec\x20\xbb\x16\x8a\x9e\xff\x78\x6e\x7e\xee\x56\xa5\x32\xf7\xd1\x27\xab\xab\xb3\x26\x71\xa0\x04\x35\x87\x04\x6b\x98\x32\xa9\x68\x65\xb6\x32\x3b\x27\x10\x72\x1f\x72\xb4\xcc\xa0\x01\x16\x25\x3a\x21\xc3\x45\x4e\xe4\x88\xd0\x6b\xa5\xd1\x72\xca\x76\xe4\xd9\xc1\xfe\x4f\xfe\xc1\xf3\xa1\xe0\xe8\xef\x92\xa4\x37\x89\xe3\x11\x17\xbb\x9c\x25\x9d\x4c\x31\xf3\x88\xcb\x30\x53\xad\xfa\x82\xf0\xcf\x48\xdd\xb5\x94\xd5\xac\x48\x97\x70\x50\x8d\x70\xa5\x24\x2a\x74\x14\x76\x39\x34\x92\x67\x41\xa8\xa1\x57\xb3\x4d\x14\x9e\x2e\x87\x77\x93\x06\x00\x00\xc5\x6d\x41\xa3\x01\x3f\xa4\xb8\x0a\x0d\xf8\x41\x79\xa4\x78\x59\xec\xb2\x72\xac\x35\x6c\x2a\xe7\x93\x4f\xa3\xff\x9b\x09\x97\xdd\x46\xd6\x57\x78\xb5\x8e\x19\x7f\xdf\x2c\xfb\xdc\xe5\x98\xba\xa8\x76\x17\xd3\x35\x4c\x3f\xa5\x94\xd0\x31\x26\xda\xf2\x04\xc0\x11\xf8\x1d\xb1\x73\xe1\xce\x18\xb3\x16\xee\xfc\xaf\x4d\xc9\x14\x05\x49\xa3\xe6\x9f\x45\x4c\x55\x1f\xc8\xd7\x3d\x0c\x0d\xc8\x38\xb5\xdd\x65\xd5\x42\xc5\x01\x50\x29\x7e\x41\x7b\x2b\x38\x79\xee\x3f\x3d\xf3\x9f\xb5\x2e\x7b\xdb\x41\x7b\xeb\xfc\xcf\x17\xe2\x31\xd8\x6e\x0f\x5a\x0f\xeb\xb4\x76\xd9\xfb\x06\x6a\x5d\xed\x60\xbe\x42\xac\x69\xf5\x10\x25\x35\x68\xbf\x0c\x7e\x3d\xd6\xf3\xd7\x69\xed\x6a\xe4\xc2\x10\x3d\xb9\xbc\xf6\xaf\x23\xc6\x2b\x09\x79\xf4\xd0\x3f\x7d\x29\x3a\x85\x8a\xc6\x6e\xdd\x81\xc6\x62\x36\x92\x96\xb4\x1a\xdd\x23\xd6\xfa\xbf\xa1\x8a\xde\x5e\xc6\x11\xaf\xb3\x74\x6e\x08\x01\x22\xd7\x97\x71\x2a\xc9\xab\x84\x3a\x88\xcb\xed\x1b\xf3\x45\xf2\xcf\xff\xe8\xf8\x3b\x27\xfe\xe3\x3d\xff\xd5\x51\x7f\xe7\x45\xd0\xda\xc8\x0b\x19\xc6\xd0\x32\x1e\x93\xa2\x82\x4d\xf0\x0c\xba\xbf\x05\xdf\xee\xab\xb2\x63\xad\xa5\x5f\xb4\x92\x2c\xc4\x91\xde\x9b\xe4\xde\x7d\x6c\xf2\x22\x6b\x86\x6d\xdf\x3f\xdc\x17\xad\xbe\xdf\xd9\x0c\x8e\xcf\x82\xbd\x53\xf5\x98\x47\x89\x87\x29\xb7\xc3\xf6\xd8\xd0\xd7\x23\x9b\x63\x87\xe9\x15\x41\x94\xa2\xf5\xc2\x5b\x3d\x3d\xf3\x5f\x1f\x5f\x3c\x79\xe4\x1f\x6e\xab\x38\x0d\x6b\xa1\x81\x39\xd4\x70\x6c\x39\x0d\x05\x4d\xeb\xc6\xb4\x8c\x24\xef\xb0\x28\x1a\x8d\x99\x7c\x86\x8b\xa3\xef\x06\xdd\x6e\x70\x70\xd8\xff\xf1\x95\xa8\x47\xc3\xab\xe9\x77\x36\xc3\x5c\x92\xb7\x52\x28\xe3\x2e\x47\xd9\x49\x85\xe2\xd5\xba\x4d\xb1\x95\x98\xa8\xe4\x8e\xcc\x94\x94\xfb\xe2\xc8\x4d\x7b\x35\x0c\xb3\xc4\xd2\x92\xe2\x0f\x64\x59\x76\x68\x0a\xaa\x7d\x99\x88\x94\x2a\xaa\x31\x9c\x1b\x47\xa0\xa1\x55\xc7\x00\xc5\x5d\x46\xc2\x9a\x39\x6a\x8f\x3b\x1e\xe3\xd2\xe7\x65\x1a\x15\x9e\x8d\x30\x63\xda\x99\x32\xc9\x7a\x88\xaf\x28\x53\x66\x19\x79\x76\x79\x6d\xae\xbc\x86\x6a\xb6\x85\x38\x2e\x53\xcd\x10\x06\x3d\x92\x1d\xcb\x52\x43\x71\xec\x77\xcf\xce\xbf\x14\x56\x77\x1c\x44\xd7\xa3\xd7\x81\xcc\xd0\x5f\x10\xcf\x3a\xf8\x65\x6f\x57\x14\x08\x11\x97\x83\xee\xb3\x7e\x67\x33\x9f\x4f\x9a\x75\x3b\x53\xe9\xf3\xe7\x90\x89\x26\x91\xe4\x2c\x92\xd9\x1a\x53\x18\x12\xaa\x89\x7c\x58\x8c\xa6\x8b\x52\xac\x2c\x5c\xd2\xe2\x95\xd2\xa7\x01\x0c\x87\x94\xe2\xd0\x21\x66\x3a\xe4\xd2\xce\xca\xa3\x9f\xc8\x2c\x90\xd7\x2a\xcf\x5f\x3f\xce\x3f\x90\xf4\x85\x1c\x72\x4a\xd1\x34\x52\x52\xc6\x06\xad\x63\x26\x74\x0e\x50\x06\xa8\x31\xa9\x19\xa1\x72\xdc\x04\x46\x93\x52\x21\x4b\x08\x29\xa2\x50\xe7\xa1\x42\xaa\x24\xb4\x88\x52\x0e\x34\x85\x5c\x11\xa6\x99\xc3\xa1\x5f\xcf\x8f\x97\x51\x4b\xc9\xd1\x68\xaa\x80\x11\x53\x4d\x61\xc0\x4c\x78\xdf\x6f\xdb\xc7\xff\xcc\xcd\x9a\x55\xdd\x5a\x66\x29\x0d\x2a\x78\xed\x29\xcd\xa8\xd5\x51\xf7\xad\x21\xda\x9a\xaf\x54\x32\x8b\x00\x48\xab\x81\x6a\xf6\x90\xa6\xbc\x70\x07\xaa\xb2\x53\xcd\xed\xe6\x54\xac\x89\x6f\x04\x63\xd8\x6f\x4e\xc1\x3e\xfc\xb2\x52\xc8\x7d\x6b\x2a\xcd\x75\xdf\x00\xa6\x7a\x27\xd5\xf4\xeb\x38\xf7\xfe\x93\x86\x1d\xb5\xdc\x74\x46\xe6\x74\xeb\x18\x9b\x6a\xd5\x62\x84\x94\xad\x5a\x9b\xe1\x6f\xad\x5b\xe7\xb7\xe2\xd2\xa8\xc8\x5d\x77\xe5\xeb\xae\x7c\xdd\x95\x27\x0e\x98\xa4\x77\x4a\xc2\x07\x57\x0e\x94\x77\xe8\x72\x26\xea\xe5\xd7\x8d\x3b\x66\x7f\xdf\x1a\xf7\x4c\xfc\x3b\xfc\xf9\x3b\x00\x00\xff\xff\xdf\x3d\xbf\x67\x67\x1b\x00\x00")

func docOpenapiJsonBytes() ([]byte, error) {
	return bindataRead(
		_docOpenapiJson,
		"doc/openapi.json",
	)
}

func docOpenapiJson() (*asset, error) {
	bytes, err := docOpenapiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc/openapi.json", size: 7015, mode: os.FileMode(420), modTime: time.Unix(1580820301, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docTestOpenapiJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x5b\x6b\x1c\x37\x14\x7e\xf7\xaf\x10\x6a\x1f\x6d\xef\xec\x26\xa5\x78\x9f\x4a\x1b\xfa\x52\x48\x4b\xdf\x4a\x08\x41\x99\x39\xbb\x56\x32\x23\x8d\x25\x8d\xb1\x09\x06\xd3\x17\xd7\x49\x7c\x81\x24\xb4\x0d\x0e\xed\xa6\x0e\x34\x34\xd8\x6e\x21\xc4\x34\x6e\xfa\x67\x3c\x63\xef\x53\xfe\x42\x99\xcb\xee\xce\x45\xb3\x33\xeb\x4b\x29\x0d\x84\x64\xa5\xa3\xef\x7c\x3a\xe7\xe8\x8c\x3e\xdd\x9b\x42\x08\x21\xcc\x5d\x60\xc4\xa5\xb8\x8d\xf0\x95\x59\x63\xd6\xc0\xd3\xf1\x38\x65\x1d\x8e\xdb\x28\xb6\x42\x08\x2b\xaa\x6c\x08\xad\x8e\xff\xee\x9d\x3c\xfe\xd5\xdf\xe8\xf9\xef\xf6\x82\x9d\x0d\xff\x7e\x2f\xd8\x7c\xe1\x6f\xfd\x92\x2c\x44\x08\x5b\x20\x4d\x41\x5d\x45\x39\x0b\x17\xf8\x3b\x07\xfe\xb3\xd5\xf7\x47\x4f\xe7\x95\x72\xdb\x8d\x86\x29\xc0\xa2\x6a\xd6\xa1\xa6\xe0\x12\xc4\x22\x35\x61\xd6\xe4\xce\x68\xbd\xc9\x99\x22\xa6\x4a\x79\x47\x08\x83\x43\xa8\x1d\xc2\xb5\xe6\x9a\xad\xe6\x47\x86\xd1\xfc\xf8\x93\x85\x85\x68\x61\x62\xb4\x32\x04\x58\x04\x21\x13\xe7\xcd\x68\x4f\x53\xa9\x79\xac\x48\x57\xe2\x36\xba\x91\x58\xa7\x7c\x30\xe2\x44\x5b\x0c\xe3\x31\x3d\x1a\xce\xef\x67\xef\x79\xf0\xdd\x9b\x93\xdf\xf6\x11\x71\x29\x4a\x36\x9f\xe7\xa0\x41\xbd\x4d\xcc\xbb\xc0\xac\x71\xc8\xdb\x9b\xfe\xd6\x81\x0e\x36\xfa\xf7\x66\xb2\x01\x93\x3b\x2e\x67\xc0\x94\x4c\x27\x48\x80\x74\x39\x93\x20\xb3\x71\xbb\xce\xd5\xe7\xdc\x63\x56\x66\xb4\xe8\x9a\x71\x85\x3a\x91\xdd\xd0\x68\x25\x45\xf4\x53\x62\x7d\x0d\x0b\x1e\x48\x75\x3e\x9c\xeb\xfc\x33\xce\x14\xb0\x6a\x18\x64\x26\x86\x25\x38\xc2\x21\x76\x05\xc8\x97\x5f\xa4\x62\x9d\xd4\x55\xe4\x3a\xbd\x08\x85\xe9\x76\x6d\x6a\x92\x70\x59\xe3\x8e\x0c\xd7\x66\x0d\x10\xc2\xd2\x9c\x07\x87\x14\x27\xc2\x72\x5a\x76\x01\xb7\x31\xbf\x7d\x07\x4c\x95\x71\x38\x80\xb7\x2c\x1a\x62\x13\xfb\x2b\xc1\x5d\x10\x8a\x86\x39\xea\x10\x5b\x82\xc6\x5a\xc0\x82\x47\x05\x58\xb8\x7d\x23\xae\x9c\x69\xec\x49\x10\xf8\xa6\xc6\xd6\x4d\xe1\x15\x99\x0d\x4b\x4f\x37\x35\x22\x2e\x95\xa0\xac\x8b\x35\x36\x2b\x45\x97\x08\xc5\x6c\x2a\x30\x89\x10\x64\x59\x13\x8b\xc8\x86\x2a\x70\x4a\x08\xa3\x3a\x01\x4d\xcc\x26\x0a\x6b\xb2\xa6\x2a\x60\x03\x86\xd6\xb8\xe9\x11\x45\xca\x14\x74\x41\xe8\x62\x17\xff\xd1\x46\x30\xc1\x18\x97\x9b\xac\x9b\xf2\x0c\x25\x5e\x4a\x66\xf4\xe3\xfa\x51\x5d\xfa\x0b\x63\xf9\x91\xec\xef\xf4\xaf\xd1\xff\x57\x0a\xdd\x39\x3e\x4b\xb9\x36\x05\x42\x70\x91\x3f\xcf\xa3\xb3\x30\xec\xd6\x03\x0c\x45\x94\x27\x6f\x99\xdc\x82\x5c\x85\x60\x07\xa4\x24\x5d\x48\x87\x2b\x73\x76\x32\x45\x80\xee\x95\xe3\xe6\x27\x87\x09\x41\xc3\xc4\xe7\xd3\x8b\x3b\x61\x5f\x52\x89\xc9\x95\x56\x36\x67\x2b\x25\x4c\x35\x8e\x72\x9d\xac\xff\xf8\xc7\xd3\xfd\xfd\x60\x6b\xfb\x64\xf7\xcf\xa2\xd3\x01\x2b\x5d\x9d\x94\x24\x25\xd5\x4a\x59\xba\x25\x57\xf7\xd8\xff\x5c\x4e\x72\xa1\x6a\x19\x46\x79\x84\xfe\xed\xbc\xe5\xbe\x40\xe8\xfc\xd9\xb2\x29\xbb\x9b\x4f\xc9\xb8\xe0\x75\xa8\x28\x7c\xb3\x75\x4c\x4f\x5e\xbd\x3a\x3e\x5c\xed\xf7\x5e\xf7\x1f\xbd\x0b\xef\x1e\xd1\x9d\x6d\x42\xf2\xb9\x30\xd9\xa4\x96\xe7\x60\x67\xd5\xdf\xde\xbc\x68\xe7\xae\x80\xc5\x1a\xce\x8f\x0f\xef\x5f\xb4\x67\x06\x4b\x75\xb6\x7d\x7c\xf8\xe0\xdc\x9e\x2b\xab\xc5\x01\x45\x26\xa9\x16\xd3\x13\x02\x98\xba\xe5\xd6\x2b\x6f\xff\xaf\x47\xfe\xfa\x46\xb8\x87\x67\xcf\x2f\xe0\xd0\x15\x0c\x2c\xe8\x10\xcf\x0e\x2d\x9a\x95\x95\x56\x97\x73\xf3\xb2\xbb\x43\x47\x70\xa7\x4e\xec\xd6\x37\xe2\xfc\x5f\x36\x1f\xc5\xeb\xb0\x19\x9c\xc0\xcb\x66\xe3\x12\x35\x5f\x83\xcf\xe9\xfe\x9b\xe0\xf7\x6f\x2f\xa4\x11\x80\xa8\x5b\x1a\xc1\x1f\xbd\x7e\xef\x75\xec\x3a\x78\x72\xd0\x5f\xdb\x3a\x43\x34\x46\x35\x8b\x5b\x46\x55\x66\x54\xe1\xfb\xaa\xe5\xb5\xfa\x36\x78\x72\x50\xcd\x65\x92\xdb\xd8\x54\x8a\x50\x94\x94\x8c\x96\x6c\x10\x97\x36\x16\x9b\x89\x54\x6f\x98\x44\x64\xf5\x23\xee\x42\x41\xc1\xe5\x64\x75\x32\x1a\x4a\xe9\xd2\xaf\xbe\xf4\x1c\x87\x88\xe5\x68\x8f\x0f\xd7\xfc\xbd\xa7\xc1\xf7\x2f\x82\x9d\x9f\xfa\xab\xeb\xc1\x83\x97\xfe\x46\xef\x64\x7d\x2d\xab\xe0\xf2\x81\xa9\xb5\xc8\x25\x82\x38\xa0\x40\x14\xe9\x15\x22\x3f\xd0\xea\x52\x11\xa1\xae\x11\x95\xbf\xc9\x44\x0f\x23\xa1\xc1\x82\x07\xa2\xa8\x70\x0a\x04\x23\x6a\xc1\xcf\x47\xfe\xd1\xd6\x37\x33\xce\x8c\xf5\xfe\xe8\x61\xff\xed\x0f\xa7\x7b\xbb\x61\xeb\xdc\x7d\x59\x04\x18\x08\xcd\x02\xb5\x62\xd9\x6b\x04\xe1\xe8\x28\x5a\x3a\xee\xe1\x3d\x7b\x49\x81\x60\xc4\xbe\xc6\xcd\x32\xd1\x38\x66\x0f\x5a\x35\x86\x3d\x11\x3d\xcc\x7c\xa0\x9f\x5d\x9a\x49\xee\xf6\x25\x92\x31\xbe\xd7\x5d\x35\x0c\xc3\x68\x96\x28\x46\x47\x76\x71\x3b\x43\x24\xbe\x10\x6b\x45\xeb\xa4\xaa\x65\xba\x5e\x45\x00\xb3\xfe\x8f\xf5\x30\x6c\x57\xb8\x65\x34\xe7\x66\x9a\xad\x99\xd6\x5c\x3e\xac\xe5\x32\x2f\x7b\x9c\xf5\x2f\x50\xd1\x54\x78\x2b\xd7\x34\xba\x0f\x05\x74\xa2\xd2\x69\x8c\xde\xb4\x1a\x43\x98\x46\xa2\x40\xc6\x36\xd1\xab\x67\x42\x4e\xbd\x67\x55\xa0\x5f\x3d\x13\xef\xe4\xcd\x6d\xf2\x8e\x3c\x15\xff\xfd\x27\x00\x00\xff\xff\x99\x11\x1e\xfe\x9d\x15\x00\x00")

func docTestOpenapiJsonBytes() ([]byte, error) {
	return bindataRead(
		_docTestOpenapiJson,
		"doc/test-openapi.json",
	)
}

func docTestOpenapiJson() (*asset, error) {
	bytes, err := docTestOpenapiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc/test-openapi.json", size: 5533, mode: os.FileMode(420), modTime: time.Unix(1580614576, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"doc/openapi.json":      docOpenapiJson,
	"doc/test-openapi.json": docTestOpenapiJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"doc": &bintree{nil, map[string]*bintree{
		"openapi.json":      &bintree{docOpenapiJson, map[string]*bintree{}},
		"test-openapi.json": &bintree{docTestOpenapiJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
